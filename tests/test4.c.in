#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#include "io.h"
#include "macros.h"
#include "network.h"
#include "hamiltonian.h"
#include "hamiltonian_qc.h"
#include "bookkeeper.h"
#include "optimize_network.h"

static void initialize_program(struct siteTensor **T3NS, 
                               struct rOperators **rops, 
                               struct optScheme * scheme)
{
        static int tstate[4] = {0,6,0,1};
        static enum symmetrygroup sgs[4] = {Z2,U1,SU2, C2v};
        static int nrsyms = 4;

        bookie.target_state = tstate;
        bookie.nrSyms = nrsyms;
        bookie.sgs = sgs;
        make_network("${CMAKE_SOURCE_DIR}/tests/networks/lif_T3NS.netw");
        readinteraction("${CMAKE_SOURCE_DIR}/tests/fcidumps/LiF_3.05.FCIDUMP");
        create_list_of_symsecs(scheme->regimes[0].minD, 1);
        init_calculation(T3NS, rops, '${TEST_INIT_OPTION}');
}

static void destroy_T3NS(struct siteTensor **T3NS)
{
        int i;
        for (i = 0; i < netw.sites; ++i)
                destroy_siteTensor(&(*T3NS)[i]);
        safe_free(*T3NS);
}

static void destroy_all_rops(struct rOperators **rops)
{
        int i;
        for (i = 0; i < netw.nr_bonds; ++i)
                destroy_rOperators(&(*rops)[i]);
        safe_free(*rops);
}

static void cleanup_before_exit(struct siteTensor **T3NS, 
                                struct rOperators **rops)
{
        destroy_network();
        destroy_T3NS(T3NS);
        destroy_all_rops(rops);
        destroy_hamiltonian();
}

int main(int argc, char *argv[])
{
        static struct regime reg[2] = {
                {100, 100, 1e-4, 2, 1e-6, 4, 2, 1e-4},
                {100, 100, 1e-4, 2, 1e-6, 100, 10, 1e-6}
        };
        static struct optScheme scheme = {2, reg};
        const double conv_energy = -106.8889308194337247;

        struct siteTensor *T3NS;
        struct rOperators *rops;

        initialize_program(&T3NS, &rops, &scheme);
        double energy = execute_optScheme(T3NS, rops, &scheme, NULL);
        cleanup_before_exit(&T3NS, &rops);
        const int OK = fabs(energy - conv_energy) < 1e-5;

        if (OK) {
                printf("\t==> Test passed\n");
                return 0;
        } else {
                printf("\t==> Test failed\n");
                return 1;
        }
}
